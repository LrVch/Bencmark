{"version":3,"sources":["line/line.js","line/utils.js","components/Benchmark/utils.js","components/Benchmark/Benchmark.js","App.js","serviceWorker.js","index.js"],"names":["findLine","arr","sorted","slice","sort","a","b","arrLength","length","isOdd","sliceLength","leftSlice","reverse","rightSlice","oddElement","center","isOddMatchCenter","res","map","elem","index","Math","abs","every","result","getRandom","min","max","floor","random","mirrorArr","getSymmetricArr","Error","halfLength","half","Array","from","_","edgeElement","lastHalf","bench","f","inRow","loops","results","start","Date","now","i","apply","arguments","push","time","createItems","functions","args","printToConsole","items","name","func","count","serial","run","this","print","console","log","repeat","getAverage","sum","done","persent","parseInt","average","printDone","Benchmark","delay","iteration","printStart","toLocaleString","forEach","item","setTimeout","className","undefined","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.680b292a.chunk.js","sourcesContent":["// import { getAsymmetricArr, getSymmetricArr } from \"./utils\";\n\n// const sourceSimetredEven = [5, -5, 10, -10];\n// const sourceSimetredOdd = [-10, -5, 0, 5, 10];\n// const sourceNotSimetredEven = [-10, -5, 5, 11];\n// const sourceNotSimetredOdd = [22, -10, -5, 0, 5, 11, 13];\n\nexport const findLine = (arr = []) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const arrLength = sorted.length;\n  const isOdd = arrLength % 2 !== 0;\n  // console.log(\"sorted\", sorted);\n  const sliceLength = isOdd ? (arrLength - 1) / 2 : arrLength / 2;\n  const leftSlice = sorted.slice(0, sliceLength).reverse();\n  const rightSlice = sorted.slice(isOdd ? sliceLength + 1 : sliceLength);\n  const oddElement = isOdd ? sorted[sliceLength] : null;\n  const center = (rightSlice[0] - leftSlice[0]) / 2 + leftSlice[0];\n  const isOddMatchCenter = oddElement === center;\n  \n  const res = rightSlice\n  .map((elem, index) => {\n    return Math.abs(center - elem) === Math.abs(leftSlice[index] - center);\n  })\n  .every(elem => !!elem);\n  \n  // console.log(\"leftSlice\", leftSlice);\n  // console.log(\"rightSlice\", rightSlice);\n  // console.log(\"oddElement\", oddElement);\n  // console.log(\"center\", center);\n  // console.log(\"res\", res);\n  // console.log(\"===\".repeat(20));\n\n  // const res = res.every(elem => !!elem)\n  const result = isOdd ? (isOddMatchCenter ? res : false) : res;\n\n  return {\n    center,\n    isOdd,\n    oddElement,\n    isOddMatchCenter: isOdd ? isOddMatchCenter : null,\n    result,\n    arr\n  };\n};\n// console.log(findLine([-6, 0, 4, 8, 14]));\n// console.log(findLine([1, 2, 4]));\n// console.log(findLine([-2, 7, 16]));\n\n// console.log(\"===\".repeat(20));\n// console.log('Symmetric');\n\n// console.log(findLine(getSymmetricArr(7).result));\n// console.log(findLine(getSymmetricArr(3).result));\n// console.log(findLine(getSymmetricArr(10).result));\n// console.log(findLine(getSymmetricArr(4).result));\n// console.log(findLine(getSymmetricArr(16).result));\n// console.log(findLine(getSymmetricArr(25).result));\n\n// console.log(\"===\".repeat(20));\n// console.log('Asymmetric');\n// console.log(getAsymmetricArr());\n\n\n// console.log(findLine(getAsymmetricArr(7)));\n// console.log(findLine(getAsymmetricArr(3)));\n// console.log(findLine(getAsymmetricArr(10)));\n// console.log(findLine(getAsymmetricArr(4)));\n// console.log(findLine(getAsymmetricArr(16)));\n// console.log(findLine(getAsymmetricArr(25)));\n\n","export const getRandom = (min, max) =>\n  min + Math.floor(Math.random() * (max + 1 - min));\n\nexport const mirrorArr = (arr, center) => {\n  return arr\n    .slice()\n    .reverse()\n    .map(elem => {\n      const step = center - elem;\n      // console.log(\"step\", step);\n      return center + step;\n    });\n};\n\nexport const getSymmetricArr = (length = 10, { min = -50, max = 50 } = {}) => {\n  if (length > 100) {\n    throw new Error(\"Length must be less or equal to 100\");\n  }\n\n  const isOdd = length % 2 !== 0;\n  const halfLength = isOdd ? (length - 1) / 2 : length / 2;\n  // const half = [-32, -25, -23, -7, -2];\n  const half = Array.from({ length: halfLength })\n    .map(_ => getRandom(min, max / 2))\n    .sort((a, b) => a - b);\n  const edgeElement = half[halfLength - 1];\n  const center = getRandom(edgeElement + 1, edgeElement + 9);\n  const lastHalf = mirrorArr(half, center);\n  const result = [...half, ...(isOdd ? [center] : []), ...lastHalf];\n\n  // console.log(\"half\", half);\n  // console.log(\"center\", center);\n  // console.log(\"lastHalf\", lastHalf);\n  return {\n    result,\n    center\n  };\n};\n\nexport const getAsymmetricArr = (length =10, { min = -50, max = 50 } ={}) => \n  Array.from({length}).map(_ => getRandom(min, max))\n","export function bench(f, inRow, loops) {\n  return function () {\n    const results = []\n    let start = Date.now();\n\n    for (let i = 0; i < loops; i++) {\n      for (let i = 0; i < inRow; i++) {\n        const result = f.apply(null, arguments[0]);\n        results.push(result)\n      }\n    }\n\n    return {\n      results,\n      time: Date.now() - start\n    };\n  }\n}\n\nexport function createItems(\n  functions,\n  inRow,\n  loops,\n  args,\n  printToConsole = false\n) {\n  const items = []\n  for (let i = 0; i < functions.length; i++) {\n    items.push({\n      name: functions[i].name,\n      func: bench(functions[i], inRow, loops),\n      time: 0,\n      count: [],\n      results: [],\n      serial: i,\n      run: function () {\n        const {time, results} = this.func(args)\n\n        this.time = time;\n        this.count.push(time);\n        this.results = results\n        printToConsole && this.print();\n      },\n      print: function () {\n        console.log(`Function \"${this.name}\" - time: ${this.time} ms`);\n        console.log('Results: ', this.results)\n        console.log('- - '.repeat(15))\n      },\n      getAverage: function () {\n        let sum = 0;\n\n        for (let i = 0; i < this.count.length; i++) {\n          sum += this.count[i];\n        }\n\n        return sum / this.count.length;\n      },\n      done: function () {\n        const max = Math.max(...this.count)\n        const min = Math.min(...this.count)\n        const persent = parseInt(100 - (min / max * 100))\n        return {\n          max,\n          min,\n          average: this.getAverage(),\n          persent\n        }\n      },\n      printDone: function () {\n        let done = this.done();\n\n        console.log(this.name\n          + \" = max time \" + done.max\n          + \" / mim time \" + done.min\n          + \" / average \" + done.average\n          + \" / persent \" + done.persent\n        )\n      },\n      // render: function () {\n      //   let bar = this.createView();\n      //   bar.style.height = this.time / 10 + \"px\";\n      //   bar.style.background = COLORS.body[this.serial];\n\n      //   container.appendChild(bar);\n      // },\n      // createView: function () {\n      //   let bar = document.createElement(\"div\");\n      //   bar.className = \"branchmark__bar\";\n      //   bar.innerHTML = this.time;\n\n      //   return bar;\n      // }\n    });\n  }\n\n  return items\n}","import './Benchmark.css'\n\nimport React from 'react'\nimport { createItems } from './utils'\n\nconst COLORS = {\n  border: \"#f0f\",\n  body: [\"#f00\", \"#0ff\"]\n};\n\nconst DIMENTIONS = {\n  width: 50\n};\n\nconst Benchmark = ({\n  args,\n  delay = 500,\n  functions,\n  inRow = 1000,\n  iteration = 1,\n  loops = 100,\n  printToConsole = false\n} = {}) => {\n\n  const items = createItems(\n    functions,\n    inRow,\n    loops,\n    args,\n    printToConsole\n  )\n\n  console.log('items', items)\n\n  const printStart = () => {\n    console.log('='.repeat(30))\n    console.log(`Start Benchmark ${new Date().toLocaleString()}`)\n    console.log(`Settings: inRow - ${inRow}, loops - ${loops}, iteration - ${iteration}`)\n    console.log('='.repeat(30))\n  }\n\n  function printDone(items) {\n    console.log('='.repeat(30))\n    console.log(`End Benchmark ${new Date().toLocaleString()}`);\n    console.log('='.repeat(30))\n    items.forEach((item) => item.printDone());\n  }\n\n  const start = () => {\n    for (let i = 0; i < items.length; i++) {\n      items[i].run();\n    }\n  }\n\n  printToConsole && printStart()\n\n  start()\n\n  if (iteration > 1) {\n    iteration--;\n    setTimeout(function time() {\n      start();\n      iteration--;\n      if (iteration > 0) {\n        setTimeout(time, delay)\n      } else {\n        printToConsole && printDone(items);\n      }\n    }, delay);\n  } else {\n    printToConsole && printDone(items);\n  }\n\n  // console.log('functions', functions)\n  // console.log('args', args)\n\n  return (\n    <div>\n      <div className=\"benchmark\">\n        {(functions === undefined || functions.length === 0) && <div className=\"branchmark__message warning\">\n          there is not functions yet\n        </div>}\n      </div>\n    </div>\n  )\n}\n\nexport default Benchmark\n","import './App.css';\nimport './line/line'\n\nimport { getAsymmetricArr, getSymmetricArr } from './line/utils'\n\nimport Benchmark from './components/Benchmark/Benchmark';\nimport React from 'react';\nimport { findLine } from './line/line'\n\n/* \n  Switch between functions and pass options\n  Save resutl globally\n*/\n\nfunction App() {\n  return (\n    <div>\n      <Benchmark\n        loops={1000}\n        inRow={1000}\n        printToConsole={true}\n        functions={[findLine]}\n        args={[getSymmetricArr(14).result]}\n        iteration=\"5\"\n      />\n\n      {/* <Benchmark\n        loops={1000}\n        inRow={1000}\n        printToConsole={true}\n        functions={[findLine]}\n        args={[getAsymmetricArr(4)]}\n        iteration=\"5\"\n      /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}